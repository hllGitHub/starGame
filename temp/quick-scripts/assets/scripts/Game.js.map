{"version":3,"sources":["Game.js"],"names":["Player","require","Star","ScoreFX","Game","cc","Class","extends","Component","properties","starPrefab","default","type","Prefab","scoreFXPrefab","maxStarDuration","minStarDuration","ground","Node","player","btnNode","gameOverNode","scoreDisplay","Label","scoreAudio","AudioClip","onLoad","groundY","y","height","currentStar","currentStarX","timer","starDuration","enabled","starPool","NodePool","scorePool","startGame","resetScore","x","active","startMoveAt","v2","spawnNewStar","newStar","size","get","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","init","startTimer","despawnStar","star","put","Math","random","width","randX","randY","jumpHeight","maxX","gainScore","pos","score","string","fx","spawnScoreFX","play","audioEngine","playEffect","toString","console","log","despawnScoreFX","scoreFX","update","dt","gameOver","stopMove","destroy"],"mappings":"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","file":"Game.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\nconst Player = require('Player');\nconst Star = require('Star');\nconst ScoreFX = require('ScoreFX');\n\nvar Game = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 这个属性引用了星星预制资源\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        scoreFXPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            default: null,\n            type: Player\n        },\n        btnNode: {\n            default: null,\n            type: cc.Node\n        },\n        gameOverNode: {\n            default: null,\n            type: cc.Node\n        },\n        // score label 的引用\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        // 得分音效资源\n        scoreAudio: cc.AudioClip,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad: function () {\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height/2;\n\n        this.currentStar = null;\n        this.currentStarX = 0;\n\n        this.timer = 0;\n        this.starDuration = 0;\n\n        this.enabled = false;\n\n        this.starPool = new cc.NodePool('Star');\n        this.scorePool = new cc.NodePool('ScoreFX')\n\n        // this.player.stopMove()\n\n        // var player1 = require(\"Player\")\n        // var instance = new player1()\n        // instance.stopMove()\n    },\n\n    startGame: function () {\n        // 开始游戏\n        this.resetScore()\n        this.enabled = true\n        // 初始化计分\n        this.btnNode.x = 3000;\n        this.gameOverNode.active = false\n        this.player.startMoveAt(cc.v2(0, this.groundY))\n\n        this.spawnNewStar();\n    },\n\n    spawnNewStar: function () {\n        var newStar = null;\n        if (this.starPool.size() > 0) {\n            newStar = this.starPool.get(this)\n        } else {\n            newStar = cc.instantiate(this.starPrefab)\n        }\n\n        this.node.addChild(newStar);\n        newStar.setPosition(this.getNewStarPosition());\n        newStar.getComponent('Star').init(this)\n\n        this.startTimer()\n        this.currentStar = newStar\n    },\n\n    despawnStar(star) {\n        this.starPool.put(star);\n        this.spawnNewStar();\n    },\n\n    startTimer: function() {\n        // 重置计时器，根据消失时间范围随机取一个值\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function () {\n        if (!this.currentStar) {\n            this.currentStarX = (Math.random() - 0.5) * 2 * this.node.width/2;\n        }\n\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        // Math.random() 随机产生0-1之间的小数\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width/2;\n        if (this.currentStarX >= 0) {\n            randX = -Math.random() * maxX\n        } else {\n            randX = Math.random() * maxX\n        }\n        this.currentStarX = randX\n        // 返回星星坐标\n        return cc.v2(randX, randY);\n    },\n\n    gainScore: function(pos) {\n        this.score += 1;\n        this.scoreDisplay.string = 'Score: ' + this.score;\n\n        // 播放特效\n        var fx = this.spawnScoreFX();\n        this.node.addChild(fx.node)\n        fx.node.setPosition(pos)\n        fx.play()\n\n        cc.audioEngine.playEffect(this.scoreAudio, false)\n    },\n\n    resetScore: function() {\n        this.score = 0;\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n    },\n\n    spawnScoreFX: function() {\n        var fx;\n        if (this.scorePool.size() > 0) {\n            fx = this.scorePool.get();\n            return fx.getComponent('ScoreFX');\n        } else {\n            fx = cc.instantiate(this.scoreFXPrefab).getComponent('ScoreFX');\n            console.log(\"fx is \" + fx)\n            fx.init(this)\n            return fx\n        }\n    },\n\n    despawnScoreFX (scoreFX) {\n        this.scorePool.put(scoreFX)\n    },\n\n    // 一帧，1s有60帧，所以update的时间大约是0.01667左右\n    update (dt) {\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            this.enabled = false\n            return;\n        }\n        this.timer += dt\n    },\n\n    gameOver: function() {\n        console.log(\"游戏结束了\")\n        // this.player.stopAllActions();   // 停止 player 节点的跳跃动作，stopAllActions ,会停止对应节点上的所有action\n        // cc.director.loadScene('game');  // 重新加载场景，cc.director 是一个管理游戏逻辑流程的单例对象\n        this.gameOverNode.active = true\n        this.player.enabled = false\n        this.player.stopMove()\n        this.currentStar.destroy()\n        this.btnNode.x = 0\n    },\n});\n\n\n"]}